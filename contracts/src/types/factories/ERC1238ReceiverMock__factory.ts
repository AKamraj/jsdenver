/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1238ReceiverMock,
  ERC1238ReceiverMockInterface,
} from "../ERC1238ReceiverMock";

const _abi = [
  {
    inputs: [],
    name: "ERC1238_ON_BATCH_MINT",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ERC1238_ON_MINT",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1238BatchMint",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1238Mint",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635f6ea4d6116100505780635f6ea4d6146100c0578063c0bfec68146100ce578063db3778e6146100e157600080fd5b806301ffc9a71461006c57806345ed75d514610094575b600080fd5b61007f61007a366004610189565b6100ef565b60405190151581526020015b60405180910390f35b6100a76100a236600461022c565b610126565b6040516001600160e01b0319909116815260200161008b565b6100a76345ed75d560e01b81565b6100a76100dc3660046102d9565b610148565b6100a7631817fd8d60e31b81565b60006001600160e01b0319821663855299bd60e01b148061012057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000846101355750600061013f565b506345ed75d560e01b5b95945050505050565b60008686600081811061015d5761015d610384565b90506020020135600014156101745750600061017e565b50631817fd8d60e31b5b979650505050505050565b60006020828403121561019b57600080fd5b81356001600160e01b0319811681146101b357600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101de57600080fd5b919050565b60008083601f8401126101f557600080fd5b50813567ffffffffffffffff81111561020d57600080fd5b60208301915083602082850101111561022557600080fd5b9250929050565b60008060008060006080868803121561024457600080fd5b61024d866101ba565b94506020860135935060408601359250606086013567ffffffffffffffff81111561027757600080fd5b610283888289016101e3565b969995985093965092949392505050565b60008083601f8401126102a657600080fd5b50813567ffffffffffffffff8111156102be57600080fd5b6020830191508360208260051b850101111561022557600080fd5b60008060008060008060006080888a0312156102f457600080fd5b6102fd886101ba565b9650602088013567ffffffffffffffff8082111561031a57600080fd5b6103268b838c01610294565b909850965060408a013591508082111561033f57600080fd5b61034b8b838c01610294565b909650945060608a013591508082111561036457600080fd5b506103718a828b016101e3565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fdfea164736f6c6343000809000a";

type ERC1238ReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1238ReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1238ReceiverMock__factory extends ContractFactory {
  constructor(...args: ERC1238ReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1238ReceiverMock> {
    return super.deploy(overrides || {}) as Promise<ERC1238ReceiverMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1238ReceiverMock {
    return super.attach(address) as ERC1238ReceiverMock;
  }
  connect(signer: Signer): ERC1238ReceiverMock__factory {
    return super.connect(signer) as ERC1238ReceiverMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1238ReceiverMockInterface {
    return new utils.Interface(_abi) as ERC1238ReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1238ReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1238ReceiverMock;
  }
}
