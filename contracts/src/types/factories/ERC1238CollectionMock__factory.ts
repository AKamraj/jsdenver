/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1238CollectionMock,
  ERC1238CollectionMockInterface,
} from "../ERC1238CollectionMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "burner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "BurnBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "burner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BurnSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "MintBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MintSingle",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "baseId",
        type: "uint48",
      },
    ],
    name: "balanceFromBaseId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[][]",
        name: "ids",
        type: "uint256[][]",
      },
    ],
    name: "balanceOfBundle",
    outputs: [
      {
        internalType: "uint256[][]",
        name: "",
        type: "uint256[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "burnBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "baseId",
        type: "uint48",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "counter",
        type: "uint48",
      },
    ],
    name: "getConstructedTokenID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mintBatchToContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mintToContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b7538038062001b7583398101604081905262000034916200020c565b6040805160c0810182526015608082019081527f45524331323338204d696e7420417070726f76616c000000000000000000000060a083015281528151808301835260018152603160f81b6020828101918252808401839052468486018190523060608601819052855180519084012094519093209551879662000108957f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9590949193929091019485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60408051601f198184030181529190528051602090910120600055506200012f8162000137565b505062000325565b80516200014c90600390602084019062000150565b5050565b8280546200015e90620002e8565b90600052602060002090601f016020900481019282620001825760008555620001cd565b82601f106200019d57805160ff1916838001178555620001cd565b82800160010185558215620001cd579182015b82811115620001cd578251825591602001919060010190620001b0565b50620001db929150620001df565b5090565b5b80821115620001db5760008155600101620001e0565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200022057600080fd5b82516001600160401b03808211156200023857600080fd5b818501915085601f8301126200024d57600080fd5b815181811115620002625762000262620001f6565b604051601f8201601f19908116603f011681019083821181831017156200028d576200028d620001f6565b816040528281528886848701011115620002a657600080fd5b600093505b82841015620002ca5784840186015181850187015292850192620002ab565b82841115620002dc5760008684830101525b98975050505050505050565b600181811c90821680620002fd57607f821691505b602082108114156200031f57634e487b7160e01b600052602260045260246000fd5b50919050565b61184080620003356000396000f3fe608060405234801561001057600080fd5b50600436106100c85760003560e01c80633644e51511610081578063dbee15241161005b578063dbee1524146101ba578063f5298aca146101da578063f9c37b65146101ed57600080fd5b80633644e5151461017e5780636b20c45414610187578063afd690861461019a57600080fd5b8063241ef346116100b2578063241ef3461461011657806329ac9db714610156578063360f38e91461016b57600080fd5b8062fdd58e146100cd57806301ffc9a7146100f3575b600080fd5b6100e06100db366004610fb2565b610255565b6040519081526020015b60405180910390f35b610106610101366004610ff5565b610300565b60405190151581526020016100ea565b6100e061012436600461102f565b6001600160a01b038216600090815260046020908152604080832065ffffffffffff8516845290915290205492915050565b6101696101643660046111ae565b610311565b005b610169610179366004611247565b610323565b6100e060005481565b61016961019536600461129c565b61032f565b6101ad6101a8366004611310565b61033f565b6040516100ea9190611399565b6101cd6101c8366004611437565b6103ef565b6040516100ea91906114f8565b6101696101e8366004611582565b6104ba565b6100e06101fb3660046115b5565b65ffffffffffff811679ffffffffffffffffffffffffffffffffffffffff000000000000603084901b16177fffffffffffff000000000000000000000000000000000000000000000000000060d085901b16179392505050565b60006001600160a01b0383166102d85760405162461bcd60e51b815260206004820152602b60248201527f455243313233383a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526002602090815260408083206001600160a01b03949094168352929052205490565b600061030b826104c5565b92915050565b61031d848484846104ea565b50505050565b61031d84848484610566565b61033a8383836105e2565b505050565b805160609060008167ffffffffffffffff81111561035f5761035f611062565b604051908082528060200260200182016040528015610388578160200160208202803683370190505b50905060005b828110156103e6576103b9868683815181106103ac576103ac6115f8565b6020026020010151610255565b8282815181106103cb576103cb6115f8565b60209081029190910101526103df81611624565b905061038e565b50949350505050565b815160609060008167ffffffffffffffff81111561040f5761040f611062565b60405190808252806020026020018201604052801561044257816020015b606081526020019060019003908161042d5790505b50905060005b828110156103e65761048c868281518110610465576104656115f8565b602002602001015186838151811061047f5761047f6115f8565b602002602001015161033f565b82828151811061049e5761049e6115f8565b6020026020010181905250806104b390611624565b9050610448565b61033a838383610808565b60006001600160e01b0319821663dddd882360e01b148061030b575061030b82610961565b6001600160a01b0384163b61054d5760405162461bcd60e51b8152602060048201526024808201527f455243313233383a20526563697069656e74206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016102cf565b61055984848484610996565b61031d3385858585610b2a565b6001600160a01b0384163b6105c95760405162461bcd60e51b8152602060048201526024808201527f455243313233383a20526563697069656e74206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016102cf565b6105d584848484610cd6565b61031d3385858585610d63565b6001600160a01b0383166106445760405162461bcd60e51b815260206004820152602360248201527f455243313233383a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016102cf565b8151815181146106a75760405162461bcd60e51b815260206004820152602860248201527f455243313233383a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102cf565b3360005b828110156107b35760008582815181106106c7576106c76115f8565b6020026020010151905060008583815181106106e5576106e56115f8565b602002602001015190506106fb84898484610e5c565b60008281526002602090815260408083206001600160a01b038c1684529091529020548181101561077a5760405162461bcd60e51b8152602060048201526024808201527f455243313233383a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016102cf565b60009283526002602090815260408085206001600160a01b038c16865290915290922091039055806107ab81611624565b9150506106ab565b50846001600160a01b0316816001600160a01b03167ff6d51a8d20e8b0143ca41399aa93b2a480cb0b95e39847e4ebd3144b2db8775d86866040516107f992919061163f565b60405180910390a35050505050565b6001600160a01b03831661086a5760405162461bcd60e51b815260206004820152602360248201527f455243313233383a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016102cf565b3361087781858585610e5c565b60008381526002602090815260408083206001600160a01b0388168452909152902054828110156108f65760405162461bcd60e51b8152602060048201526024808201527f455243313233383a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016102cf565b60008481526002602090815260408083206001600160a01b03898116808652918452938290208786039055905186815287939192918616917f995c922928fc04a31c6446db7f51f402ddb95ac41fa3dca51c98ff1fe730053191015b60405180910390a45050505050565b60006001600160e01b03198216631d31540b60e21b148061030b57506301ffc9a760e01b6001600160e01b031983161461030b565b8251825181146109f95760405162461bcd60e51b815260206004820152602860248201527f455243313233383a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102cf565b3360005b82811015610ad457610a448288888481518110610a1c57610a1c6115f8565b6020026020010151888581518110610a3657610a366115f8565b602002602001015188610e68565b848181518110610a5657610a566115f8565b602002602001015160026000888481518110610a7457610a746115f8565b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b031681526020019081526020016000206000828254610abc919061166d565b90915550819050610acc81611624565b9150506109fd565b50856001600160a01b0316816001600160a01b03167f5c5ac6bfb3f54a39f008d2e9be10d575012f29230716d49e92da377d748b1a878787604051610b1a92919061163f565b60405180910390a3505050505050565b604051631817fd8d60e31b81526001600160a01b0385169063c0bfec6890610b5c9088908790879087906004016116d2565b602060405180830381600087803b158015610b7657600080fd5b505af1925050508015610ba6575060408051601f3d908101601f19168201909252610ba391810190611725565b60015b610c5c57610bb2611742565b806308c379a01415610bec5750610bc761175e565b80610bd25750610bee565b8060405162461bcd60e51b81526004016102cf91906117e8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313233383a207472616e7366657220746f206e6f6e204552433132333860448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016102cf565b6001600160e01b03198116631817fd8d60e31b14610ccd5760405162461bcd60e51b815260206004820152602860248201527f455243313233383a204552433132333852656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102cf565b505b5050505050565b33610ce48186868686610e68565b60008481526002602090815260408083206001600160a01b038916845290915281208054859290610d1690849061166d565b9250508190555083856001600160a01b0316826001600160a01b03167f17facb1ae55b1a0fe54049767ddeb027123cb5d0379a5a1c6f5c954287d88fb38660405161095291815260200190565b6040516345ed75d560e01b81526001600160a01b038516906345ed75d590610d959088908790879087906004016117fb565b602060405180830381600087803b158015610daf57600080fd5b505af1925050508015610ddf575060408051601f3d908101601f19168201909252610ddc91810190611725565b60015b610deb57610bb2611742565b6001600160e01b031981166345ed75d560e01b14610ccd5760405162461bcd60e51b815260206004820152602860248201527f455243313233383a204552433132333852656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102cf565b61031d84848484610e75565b610ccf8585858585610f51565b6001600160a01b038316600090815260046020908152604080832060d086901c80855292529091205482811015610f145760405162461bcd60e51b815260206004820152602c60248201527f455243313233383a206275726e20616d6f756e7420657863656564732062617360448201527f652069642062616c616e6365000000000000000000000000000000000000000060648201526084016102cf565b506001600160a01b03909316600090815260046020908152604080832065ffffffffffff9096168352949052929092208054929092039091555050565b6001600160a01b038416600090815260046020908152604080832060d087901c80855292528220805491928592610f8990849061166d565b9091555050505050505050565b80356001600160a01b0381168114610fad57600080fd5b919050565b60008060408385031215610fc557600080fd5b610fce83610f96565b946020939093013593505050565b6001600160e01b031981168114610ff257600080fd5b50565b60006020828403121561100757600080fd5b813561101281610fdc565b9392505050565b803565ffffffffffff81168114610fad57600080fd5b6000806040838503121561104257600080fd5b61104b83610f96565b915061105960208401611019565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561109e5761109e611062565b6040525050565b600067ffffffffffffffff8211156110bf576110bf611062565b5060051b60200190565b600082601f8301126110da57600080fd5b813560206110e7826110a5565b6040516110f48282611078565b83815260059390931b850182019282810191508684111561111457600080fd5b8286015b8481101561112f5780358352918301918301611118565b509695505050505050565b600082601f83011261114b57600080fd5b813567ffffffffffffffff81111561116557611165611062565b60405161117c601f8301601f191660200182611078565b81815284602083860101111561119157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156111c457600080fd5b6111cd85610f96565b9350602085013567ffffffffffffffff808211156111ea57600080fd5b6111f6888389016110c9565b9450604087013591508082111561120c57600080fd5b611218888389016110c9565b9350606087013591508082111561122e57600080fd5b5061123b8782880161113a565b91505092959194509250565b6000806000806080858703121561125d57600080fd5b61126685610f96565b93506020850135925060408501359150606085013567ffffffffffffffff81111561129057600080fd5b61123b8782880161113a565b6000806000606084860312156112b157600080fd5b6112ba84610f96565b9250602084013567ffffffffffffffff808211156112d757600080fd5b6112e3878388016110c9565b935060408601359150808211156112f957600080fd5b50611306868287016110c9565b9150509250925092565b6000806040838503121561132357600080fd5b61132c83610f96565b9150602083013567ffffffffffffffff81111561134857600080fd5b611354858286016110c9565b9150509250929050565b600081518084526020808501945080840160005b8381101561138e57815187529582019590820190600101611372565b509495945050505050565b602081526000611012602083018461135e565b600082601f8301126113bd57600080fd5b813560206113ca826110a5565b6040516113d78282611078565b83815260059390931b85018201928281019150868411156113f757600080fd5b8286015b8481101561112f57803567ffffffffffffffff81111561141b5760008081fd5b6114298986838b01016110c9565b8452509183019183016113fb565b6000806040838503121561144a57600080fd5b823567ffffffffffffffff8082111561146257600080fd5b818501915085601f83011261147657600080fd5b81356020611483826110a5565b6040516114908282611078565b83815260059390931b85018201928281019150898411156114b057600080fd5b948201945b838610156114d5576114c686610f96565b825294820194908201906114b5565b965050860135925050808211156114eb57600080fd5b50611354858286016113ac565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561157457888603603f19018552825180518088529088019088880190845b8181101561155e5783518352928a0192918a0191600101611542565b5090975050509386019391860191600101611520565b509398975050505050505050565b60008060006060848603121561159757600080fd5b6115a084610f96565b95602085013595506040909401359392505050565b6000806000606084860312156115ca57600080fd5b6115d384611019565b92506115e160208501610f96565b91506115ef60408501611019565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156116385761163861160e565b5060010190565b604081526000611652604083018561135e565b8281036020840152611664818561135e565b95945050505050565b600082198211156116805761168061160e565b500190565b6000815180845260005b818110156116ab5760208185018101518683018201520161168f565b818111156116bd576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03851681526080602082015260006116f4608083018661135e565b8281036040840152611706818661135e565b9050828103606084015261171a8185611685565b979650505050505050565b60006020828403121561173757600080fd5b815161101281610fdc565b600060033d111561175b5760046000803e5060005160e01c5b90565b600060443d101561176c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561179c57505050505090565b82850191508151818111156117b45750505050505090565b843d87010160208285010111156117ce5750505050505090565b6117dd60208286010187611078565b509095945050505050565b6020815260006110126020830184611685565b6001600160a01b03851681528360208201528260408201526080606082015260006118296080830184611685565b969550505050505056fea164736f6c6343000809000a";

type ERC1238CollectionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1238CollectionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1238CollectionMock__factory extends ContractFactory {
  constructor(...args: ERC1238CollectionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1238CollectionMock> {
    return super.deploy(
      baseURI_,
      overrides || {}
    ) as Promise<ERC1238CollectionMock>;
  }
  getDeployTransaction(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(baseURI_, overrides || {});
  }
  attach(address: string): ERC1238CollectionMock {
    return super.attach(address) as ERC1238CollectionMock;
  }
  connect(signer: Signer): ERC1238CollectionMock__factory {
    return super.connect(signer) as ERC1238CollectionMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1238CollectionMockInterface {
    return new utils.Interface(_abi) as ERC1238CollectionMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1238CollectionMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC1238CollectionMock;
  }
}
