/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC1238, ERC1238Interface } from "../ERC1238";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "burner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "BurnBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "burner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BurnSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "MintBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MintSingle",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[][]",
        name: "ids",
        type: "uint256[][]",
      },
    ],
    name: "balanceOfBundle",
    outputs: [
      {
        internalType: "uint256[][]",
        name: "",
        type: "uint256[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a9b38038062000a9b833981016040819052620000349162000207565b6040805160c0810182526015608082019081527f45524331323338204d696e7420417070726f76616c000000000000000000000060a083015281528151808301835260018152603160f81b6020828101918252808401839052468486018190523060608601819052855180519084012094519093209551949562000104957f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95949193019485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b60408051601f198184030181529190528051602090910120600055506200012b8162000132565b5062000320565b8051620001479060039060208401906200014b565b5050565b8280546200015990620002e3565b90600052602060002090601f0160209004810192826200017d5760008555620001c8565b82601f106200019857805160ff1916838001178555620001c8565b82800160010185558215620001c8579182015b82811115620001c8578251825591602001919060010190620001ab565b50620001d6929150620001da565b5090565b5b80821115620001d65760008155600101620001db565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200021b57600080fd5b82516001600160401b03808211156200023357600080fd5b818501915085601f8301126200024857600080fd5b8151818111156200025d576200025d620001f1565b604051601f8201601f19908116603f01168101908382118183101715620002885762000288620001f1565b816040528281528886848701011115620002a157600080fd5b600093505b82841015620002c55784840186015181850187015292850192620002a6565b82841115620002d75760008684830101525b98975050505050505050565b600181811c90821680620002f857607f821691505b602082108114156200031a57634e487b7160e01b600052602260045260246000fd5b50919050565b61076b80620003306000396000f3fe608060405234801561001057600080fd5b50600436106100665760003560e01c80633644e515116100505780633644e515146100b4578063afd69086146100bd578063dbee1524146100dd57600080fd5b8062fdd58e1461006b57806301ffc9a714610091575b600080fd5b61007e61007936600461039c565b6100fd565b6040519081526020015b60405180910390f35b6100a461009f3660046103c6565b6101c1565b6040519015158152602001610088565b61007e60005481565b6100d06100cb3660046104cd565b6101f8565b604051610088919061051b565b6100f06100eb3660046105df565b6102a8565b6040516100889190610695565b600073ffffffffffffffffffffffffffffffffffffffff831661018c5760405162461bcd60e51b815260206004820152602b60248201527f455243313233383a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840160405180910390fd5b50600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b60006001600160e01b03198216631d31540b60e21b14806101f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b805160609060008167ffffffffffffffff811115610218576102186103f7565b604051908082528060200260200182016040528015610241578160200160208202803683370190505b50905060005b8281101561029f57610272868683815181106102655761026561071f565b60200260200101516100fd565b8282815181106102845761028461071f565b602090810291909101015261029881610735565b9050610247565b50949350505050565b815160609060008167ffffffffffffffff8111156102c8576102c86103f7565b6040519080825280602002602001820160405280156102fb57816020015b60608152602001906001900390816102e65790505b50905060005b8281101561029f5761034586828151811061031e5761031e61071f565b60200260200101518683815181106103385761033861071f565b60200260200101516101f8565b8282815181106103575761035761071f565b60200260200101819052508061036c90610735565b9050610301565b803573ffffffffffffffffffffffffffffffffffffffff8116811461039757600080fd5b919050565b600080604083850312156103af57600080fd5b6103b883610373565b946020939093013593505050565b6000602082840312156103d857600080fd5b81356001600160e01b0319811681146103f057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610436576104366103f7565b604052919050565b600067ffffffffffffffff821115610458576104586103f7565b5060051b60200190565b600082601f83011261047357600080fd5b813560206104886104838361043e565b61040d565b82815260059290921b840181019181810190868411156104a757600080fd5b8286015b848110156104c257803583529183019183016104ab565b509695505050505050565b600080604083850312156104e057600080fd5b6104e983610373565b9150602083013567ffffffffffffffff81111561050557600080fd5b61051185828601610462565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561055357835183529284019291840191600101610537565b50909695505050505050565b600082601f83011261057057600080fd5b813560206105806104838361043e565b82815260059290921b8401810191818101908684111561059f57600080fd5b8286015b848110156104c257803567ffffffffffffffff8111156105c35760008081fd5b6105d18986838b0101610462565b8452509183019183016105a3565b600080604083850312156105f257600080fd5b823567ffffffffffffffff8082111561060a57600080fd5b818501915085601f83011261061e57600080fd5b8135602061062e6104838361043e565b82815260059290921b8401810191818101908984111561064d57600080fd5b948201945b838610156106725761066386610373565b82529482019490820190610652565b9650508601359250508082111561068857600080fd5b506105118582860161055f565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561071157888603603f19018552825180518088529088019088880190845b818110156106fb5783518352928a0192918a01916001016106df565b50909750505093860193918601916001016106bd565b509398975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561075757634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";

type ERC1238ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1238ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1238__factory extends ContractFactory {
  constructor(...args: ERC1238ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1238> {
    return super.deploy(baseURI_, overrides || {}) as Promise<ERC1238>;
  }
  getDeployTransaction(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(baseURI_, overrides || {});
  }
  attach(address: string): ERC1238 {
    return super.attach(address) as ERC1238;
  }
  connect(signer: Signer): ERC1238__factory {
    return super.connect(signer) as ERC1238__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1238Interface {
    return new utils.Interface(_abi) as ERC1238Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1238 {
    return new Contract(address, _abi, signerOrProvider) as ERC1238;
  }
}
